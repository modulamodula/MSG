/*

            MSG II 
      Møffenzeef Mødular
        Røss Fish 2018
  http://moffenzeefmodular.com
         CC-BY-NC-SA

  Based on "Generating a tone using DDS"
      By: David Johnson-Davies
  http://www.technoblogy.com/show?QVN
          CC BY 4.0
*/

// Wavetables
const unsigned char one_wav[] PROGMEM = {
  0x54, 0xa0, 0xbe, 0xba, 0xb8, 0xb5, 0x9d, 0x74, 0x5b, 0x5a, 0x60, 0x62,
  0x77, 0xa9, 0xda, 0xda, 0x9e, 0x4d, 0x21, 0x32, 0x67, 0x97, 0xae, 0xba,
  0xc5, 0xc3, 0xa5, 0x78, 0x59, 0x49, 0x37, 0x2d, 0x4d, 0x9d, 0xe1, 0xdc,
  0x98, 0x54, 0x3d, 0x48, 0x59, 0x6b, 0x84, 0xa0, 0xb0, 0xac, 0x9a, 0x84,
  0x67, 0x41, 0x1b, 0x19, 0x52, 0xaf, 0xf1, 0xe8, 0xae, 0x7e, 0x6e, 0x67,
  0x58, 0x56, 0x70, 0x94, 0xa5, 0xa7, 0xb0, 0xb4, 0x94, 0x51, 0x1b, 0x26,
  0x6c, 0xbc, 0xe3, 0xd9, 0xb6, 0x96, 0x7c, 0x5f, 0x42, 0x39, 0x4b, 0x67,
  0x7e, 0x99, 0xbf, 0xd0, 0xa4, 0x4d, 0x14, 0x27, 0x69, 0x9d, 0xae, 0xae,
  0xac, 0x9d, 0x7b, 0x57, 0x42, 0x3d, 0x3f, 0x4c, 0x73, 0xb1, 0xeb, 0xf3,
  0xb9, 0x63, 0x32, 0x40, 0x6a, 0x84, 0x8e, 0x9f, 0xb5, 0xb3, 0x95, 0x78,
  0x6b, 0x5c, 0x43, 0x3e, 0x71, 0xc7, 0xff, 0xf0, 0xac, 0x67, 0x43, 0x3e,
  0x46, 0x51, 0x65, 0x85, 0xa2, 0xac, 0xa3, 0x97, 0x84, 0x5c, 0x2a, 0x20,
  0x5c, 0xb7, 0xe4, 0xca, 0x92, 0x6c, 0x58, 0x43, 0x34, 0x3f, 0x62, 0x85,
  0x9f, 0xb7, 0xd0, 0xd3, 0xab, 0x62, 0x26, 0x24, 0x61, 0xaa, 0xc9, 0xba,
  0x9f, 0x91, 0x82, 0x63, 0x4a, 0x4f, 0x6a, 0x80, 0x93, 0xb9, 0xe8, 0xed,
  0xaa, 0x49, 0x12, 0x1e, 0x4f, 0x7b, 0x93, 0x9f, 0xa6, 0xa2, 0x8f, 0x73,
  0x5b, 0x51, 0x4f, 0x52, 0x6d, 0xa8, 0xe2, 0xe1, 0x96, 0x3d, 0x18, 0x2d,
  0x4d, 0x64, 0x7f, 0xa6, 0xc3, 0xc2, 0xae, 0x9c, 0x88, 0x63, 0x3a, 0x33,
  0x62, 0xb0, 0xe5, 0xda, 0x9d, 0x61, 0x4a, 0x51, 0x5a, 0x63, 0x7d, 0xa7,
  0xc5, 0xc5, 0xb9, 0xb0, 0x93, 0x51, 0x0e, 0x08, 0x4c, 0xa1, 0xc8, 0xba,
  0x9b, 0x81, 0x6d, 0x5a, 0x4e, 0x53, 0x67, 0x81, 0x97, 0xaa, 0xbb, 0xbb,
  0x90, 0x40, 0x00, 0x08
};

const unsigned char two_wav[] PROGMEM = {
  0x7c, 0x3f, 0x12, 0x16, 0x1f, 0x01, 0x00, 0x56, 0xb5, 0xc9, 0xc0, 0xd4,
  0xed, 0xed, 0xe7, 0xdf, 0xc9, 0xb1, 0xaa, 0xa4, 0x94, 0x7d, 0x67, 0x53,
  0x49, 0x38, 0x14, 0x0a, 0x49, 0x94, 0x9a, 0x85, 0xab, 0xed, 0xf6, 0xd7,
  0xd2, 0xdc, 0xd2, 0xb6, 0x9d, 0x8b, 0x86, 0x85, 0x6a, 0x37, 0x11, 0x0f,
  0x24, 0x46, 0x73, 0x91, 0x9d, 0xba, 0xec, 0xf5, 0xc6, 0xa5, 0xa8, 0x93,
  0x60, 0x50, 0x6c, 0x84, 0x8f, 0x98, 0x92, 0x8a, 0xa2, 0xbe, 0xb1, 0x8c,
  0x84, 0x9e, 0xbb, 0xbc, 0xa9, 0xa2, 0xa3, 0x87, 0x50, 0x36, 0x4c, 0x62,
  0x61, 0x5e, 0x66, 0x73, 0x8c, 0xaf, 0xbf, 0xab, 0x99, 0xab, 0xcf, 0xd5,
  0xc2, 0xb8, 0xbe, 0xb3, 0x7b, 0x30, 0x10, 0x27, 0x36, 0x1c, 0x21, 0x6b,
  0xb0, 0xc2, 0xd3, 0xf1, 0xe8, 0xc8, 0xca, 0xd0, 0xb0, 0x97, 0xa9, 0xb7,
  0xa2, 0x85, 0x73, 0x6e, 0x77, 0x6a, 0x35, 0x19, 0x45, 0x7a, 0x7c, 0x79,
  0x97, 0xaf, 0xae, 0xb0, 0xb5, 0xa5, 0x9d, 0xae, 0xac, 0x87, 0x7a, 0x9c,
  0xac, 0x83, 0x50, 0x43, 0x59, 0x77, 0x92, 0x9e, 0xa8, 0xbe, 0xcf, 0xbe,
  0x9b, 0x8c, 0x84, 0x68, 0x4b, 0x4a, 0x5c, 0x76, 0x9e, 0xbe, 0xb7, 0xa4,
  0xb1, 0xc9, 0xc1, 0x9d, 0x87, 0x8f, 0xa0, 0x9e, 0x8b, 0x82, 0x84, 0x6e,
  0x45, 0x2f, 0x32, 0x3d, 0x5c, 0x86, 0x8b, 0x79, 0x97, 0xd7, 0xe5, 0xc0,
  0xb9, 0xd7, 0xe1, 0xcd, 0xbd, 0xbc, 0xbd, 0xaa, 0x72, 0x30, 0x14, 0x1c,
  0x24, 0x33, 0x55, 0x6a, 0x73, 0xa7, 0xf5, 0xff, 0xca, 0xb5, 0xca, 0xb5,
  0x78, 0x65, 0x88, 0x9d, 0x8a, 0x70, 0x69, 0x74, 0x83, 0x80, 0x63, 0x52,
  0x6c, 0x95, 0xac, 0xb7, 0xbe, 0xb5, 0xab, 0xb3, 0xa8, 0x79, 0x68, 0x87,
  0x85, 0x56, 0x51, 0x84, 0xa4, 0x9e, 0x94, 0x89, 0x88, 0xa8, 0xcd, 0xd1,
  0xce, 0xd3, 0xc9, 0xa9
};

const unsigned char three_wav[] PROGMEM = {
  0x75, 0x74, 0x73, 0x71, 0x6e, 0x6c, 0x6b, 0x7a, 0x7a, 0x6b, 0x6c, 0x7e,
  0x6f, 0x60, 0x80, 0x8f, 0x6c, 0x59, 0x56, 0x52, 0x90, 0xbe, 0x8e, 0x4f,
  0x42, 0x56, 0x5c, 0x82, 0xa9, 0x8f, 0x75, 0x6a, 0x3e, 0x40, 0x90, 0xaf,
  0x7d, 0x59, 0x55, 0x51, 0x7e, 0xcc, 0x8b, 0x3b, 0x3c, 0x4e, 0x5f, 0xb0,
  0xd0, 0x7d, 0x58, 0x52, 0x1b, 0x23, 0xab, 0xf4, 0xae, 0x69, 0x26, 0x05,
  0x66, 0xd9, 0x9e, 0x43, 0x6a, 0x82, 0x5a, 0x72, 0x89, 0x7e, 0x82, 0x64,
  0x14, 0x32, 0xd0, 0xfe, 0x8c, 0x2b, 0x1c, 0x1e, 0x82, 0xc7, 0x9c, 0x7f,
  0x92, 0x52, 0x10, 0x4c, 0xa7, 0x9f, 0x97, 0x70, 0x38, 0x42, 0x9e, 0xab,
  0x69, 0x59, 0x5a, 0x4c, 0x7f, 0xa3, 0x96, 0x69, 0x6c, 0x4d, 0x3e, 0x6e,
  0x9e, 0x9d, 0x8c, 0x6b, 0x3b, 0x4c, 0x7e, 0x90, 0x83, 0x76, 0x68, 0x6a,
  0x6b, 0x7a, 0x69, 0x77, 0x75, 0x73, 0x71, 0x70, 0x6f, 0x6f, 0x70, 0x70,
  0x81, 0x82, 0x63, 0x64, 0x64, 0x74, 0x74, 0x85, 0x85, 0x76, 0x67, 0x58,
  0x4a, 0x7d, 0xb0, 0x83, 0x56, 0x58, 0x69, 0x78, 0x96, 0x82, 0x4c, 0x54,
  0x7d, 0x65, 0x7e, 0xa9, 0x96, 0x55, 0x46, 0x39, 0x3c, 0xa0, 0xe4, 0xa6,
  0x58, 0x39, 0x28, 0x47, 0xa6, 0xb5, 0x75, 0x75, 0x76, 0x48, 0x4c, 0x91,
  0x97, 0x6e, 0x76, 0x3d, 0x25, 0xab, 0xff, 0x91, 0x20, 0x1c, 0x36, 0x6e,
  0xd4, 0xba, 0x71, 0x79, 0x63, 0x00, 0x1e, 0xaf, 0xe2, 0xb4, 0x67, 0x19,
  0x1a, 0x9a, 0xc8, 0x75, 0x41, 0x6e, 0x6a, 0x67, 0x95, 0x94, 0x75, 0x78,
  0x4c, 0x12, 0x5a, 0xd2, 0xca, 0x81, 0x56, 0x2a, 0x2c, 0x7c, 0xaa, 0x96,
  0x82, 0x7e, 0x4a, 0x47, 0x76, 0x86, 0x77, 0x88, 0x7a, 0x4b, 0x5c, 0x8c,
  0x8b, 0x79, 0x67, 0x54, 0x61, 0x7f, 0x8d, 0x7b, 0x6b, 0x6b, 0x6c, 0x6e,
  0x70, 0x72, 0x74, 0x75
};

const unsigned char four_wav[] PROGMEM = {
  0x7f, 0x7d, 0x7e, 0x7d, 0x7e, 0x84, 0x8c, 0x90, 0x8e, 0x85, 0x84, 0x8e,
  0x8b, 0x6f, 0x56, 0x59, 0x68, 0x6d, 0x65, 0x5e, 0x67, 0x85, 0x9e, 0x94,
  0x87, 0xa5, 0xd1, 0xd0, 0xa5, 0x80, 0x78, 0x83, 0x84, 0x5d, 0x29, 0x27,
  0x52, 0x60, 0x43, 0x42, 0x7c, 0xc2, 0xde, 0xc9, 0xa6, 0xa9, 0xd6, 0xdd,
  0x97, 0x4c, 0x42, 0x54, 0x41, 0x12, 0x00, 0x29, 0x79, 0xa9, 0x93, 0x73,
  0x9a, 0xea, 0xff, 0xcf, 0xa2, 0xa2, 0xb0, 0x9e, 0x5f, 0x23, 0x2a, 0x5e,
  0x65, 0x2d, 0x09, 0x34, 0x84, 0xb2, 0xb1, 0xa7, 0xbf, 0xeb, 0xec, 0xaf,
  0x76, 0x77, 0x8d, 0x78, 0x38, 0x0a, 0x16, 0x4a, 0x6d, 0x6a, 0x65, 0x88,
  0xba, 0xc9, 0xb1, 0x9e, 0xaa, 0xc0, 0xb6, 0x87, 0x5c, 0x56, 0x68, 0x6c,
  0x5c, 0x51, 0x5e, 0x75, 0x80, 0x7b, 0x79, 0x88, 0x9c, 0x9f, 0x91, 0x84,
  0x82, 0x85, 0x83, 0x7b, 0x76, 0x77, 0x7b, 0x7d, 0x80, 0x83, 0x83, 0x7e,
  0x79, 0x78, 0x7a, 0x77, 0x6e, 0x69, 0x72, 0x81, 0x87, 0x86, 0x8e, 0xa0,
  0xab, 0xa6, 0x93, 0x83, 0x86, 0x92, 0x86, 0x61, 0x48, 0x4b, 0x53, 0x50,
  0x4d, 0x56, 0x71, 0x98, 0xab, 0x9e, 0x99, 0xbb, 0xdd, 0xd2, 0xa9, 0x85,
  0x6d, 0x60, 0x54, 0x36, 0x19, 0x2b, 0x59, 0x66, 0x58, 0x6b, 0xa3, 0xd8,
  0xf3, 0xeb, 0xc3, 0xa7, 0xae, 0xa2, 0x68, 0x3a, 0x40, 0x4b, 0x3b, 0x27,
  0x20, 0x34, 0x6e, 0xa8, 0xa9, 0x8e, 0xa3, 0xd4, 0xdf, 0xc8, 0xb6, 0xa9,
  0x9a, 0x88, 0x5a, 0x19, 0x0a, 0x3a, 0x5b, 0x4c, 0x46, 0x67, 0x94, 0xb9,
  0xce, 0xc6, 0xbb, 0xcc, 0xd0, 0x9c, 0x5f, 0x54, 0x64, 0x62, 0x4f, 0x3c,
  0x35, 0x4c, 0x75, 0x83, 0x7a, 0x88, 0xac, 0xb7, 0xa4, 0x92, 0x8e, 0x93,
  0x97, 0x8d, 0x71, 0x61, 0x6b, 0x76, 0x70, 0x6b, 0x73, 0x7e, 0x85, 0x85,
  0x83, 0x82, 0x84, 0x83
};

const unsigned char five_wav[] PROGMEM = {
  0xc4, 0xff, 0xcd, 0x89, 0x89, 0xa7, 0x95, 0x58, 0x31, 0x32, 0x2d, 0x19,
  0x2b, 0x70, 0xa2, 0x8d, 0x69, 0x88, 0xd3, 0xdf, 0x8e, 0x3d, 0x43, 0x7e,
  0x98, 0x7d, 0x5d, 0x4a, 0x2d, 0x0f, 0x27, 0x7b, 0xb9, 0xa4, 0x6f, 0x78,
  0xbb, 0xd9, 0xa3, 0x59, 0x47, 0x5b, 0x5d, 0x48, 0x44, 0x56, 0x5c, 0x54,
  0x68, 0x9d, 0xb1, 0x7a, 0x37, 0x44, 0x9d, 0xe0, 0xce, 0x8d, 0x62, 0x53,
  0x46, 0x3a, 0x43, 0x52, 0x49, 0x34, 0x4b, 0x94, 0xcb, 0xb9, 0x85, 0x7c,
  0xa1, 0xb2, 0x8b, 0x51, 0x39, 0x43, 0x52, 0x60, 0x6e, 0x67, 0x3d, 0x18,
  0x37, 0x97, 0xe5, 0xe2, 0xac, 0x8c, 0x91, 0x93, 0x75, 0x4c, 0x2f, 0x1e,
  0x18, 0x2f, 0x64, 0x8d, 0x89, 0x75, 0x89, 0xbf, 0xd5, 0xa5, 0x5f, 0x47,
  0x62, 0x83, 0x89, 0x79, 0x57, 0x28, 0x08, 0x22, 0x6f, 0xa8, 0x9f, 0x7a,
  0x7f, 0xaf, 0xca, 0xac, 0x76, 0x59, 0x53, 0x4d, 0x48, 0x53, 0x5e, 0x51,
  0x43, 0x61, 0x9f, 0xb6, 0x80, 0x3d, 0x43, 0x8d, 0xcb, 0xc9, 0xa3, 0x7f,
  0x5e, 0x3a, 0x2e, 0x49, 0x61, 0x4b, 0x25, 0x39, 0x8c, 0xca, 0xb8, 0x85,
  0x80, 0xa6, 0xb2, 0x8a, 0x5c, 0x4d, 0x4c, 0x42, 0x49, 0x6e, 0x81, 0x51,
  0x0c, 0x18, 0x83, 0xe3, 0xe4, 0xac, 0x92, 0xa1, 0x9c, 0x71, 0x4b, 0x43,
  0x35, 0x13, 0x0f, 0x4e, 0x97, 0x99, 0x6b, 0x6c, 0xb5, 0xe8, 0xba, 0x60,
  0x41, 0x67, 0x88, 0x7f, 0x6e, 0x69, 0x4c, 0x11, 0x00, 0x49, 0xaa, 0xb9,
  0x7d, 0x63, 0x9e, 0xdb, 0xc2, 0x76, 0x52, 0x60, 0x62, 0x44, 0x3a, 0x59,
  0x6a, 0x4f, 0x42, 0x7b, 0xbf, 0xac, 0x4e, 0x23, 0x6a, 0xcd, 0xde, 0xa5,
  0x78, 0x6e, 0x59, 0x31, 0x2b, 0x52, 0x66, 0x3e, 0x21, 0x5a, 0xbe, 0xda,
  0x9b, 0x6a, 0x8b, 0xc0, 0xad, 0x64, 0x3b, 0x4a, 0x58, 0x4d, 0x52, 0x71,
  0x70, 0x32, 0x07, 0x46
};

const unsigned char six_wav[] PROGMEM = {
  0x29, 0x00, 0x36, 0x90, 0xc4, 0xc2, 0xaf, 0xa8, 0xa9, 0xa1, 0x94, 0x8f,
  0x97, 0xa1, 0xab, 0xbd, 0xcb, 0xc0, 0x93, 0x68, 0x67, 0x8b, 0x9d, 0x78,
  0x42, 0x45, 0x93, 0xea, 0xf8, 0xbc, 0x82, 0x88, 0xb6, 0xcb, 0xac, 0x83,
  0x7e, 0x9b, 0xaf, 0xa1, 0x81, 0x6e, 0x6f, 0x7c, 0x8d, 0x9f, 0xa4, 0x91,
  0x75, 0x77, 0xab, 0xed, 0xff, 0xd4, 0x9b, 0x88, 0x93, 0x88, 0x59, 0x38,
  0x5e, 0xb6, 0xf0, 0xd2, 0x80, 0x4a, 0x59, 0x8c, 0xad, 0xb1, 0xae, 0xb6,
  0xc2, 0xc6, 0xc4, 0xbd, 0xa7, 0x7b, 0x50, 0x49, 0x6d, 0x94, 0x98, 0x87,
  0x8e, 0xb8, 0xd5, 0xb5, 0x70, 0x50, 0x80, 0xd3, 0xfa, 0xd9, 0x9e, 0x83,
  0x8d, 0x98, 0x8c, 0x79, 0x73, 0x78, 0x7a, 0x7b, 0x87, 0x9b, 0xa4, 0x9e,
  0xa3, 0xc8, 0xef, 0xe3, 0x9a, 0x50, 0x4d, 0x8e, 0xcd, 0xcd, 0x9d, 0x7a,
  0x7f, 0x8c, 0x7d, 0x5c, 0x56, 0x7b, 0xad, 0xc9, 0xcb, 0xc9, 0xc8, 0xbf,
  0xaa, 0x99, 0x93, 0x89, 0x6d, 0x55, 0x68, 0xab, 0xe2, 0xd2, 0x83, 0x3f,
  0x43, 0x7b, 0xa8, 0xaf, 0xad, 0xc6, 0xe9, 0xe6, 0xb3, 0x7c, 0x6e, 0x85,
  0x98, 0x92, 0x81, 0x7c, 0x7e, 0x7c, 0x7b, 0x8d, 0xad, 0xbd, 0xac, 0x91,
  0x91, 0xab, 0xba, 0xa9, 0x94, 0xa2, 0xcb, 0xd7, 0xa6, 0x5d, 0x3e, 0x5c,
  0x86, 0x8e, 0x7d, 0x7e, 0xa1, 0xc6, 0xca, 0xb7, 0xac, 0xb0, 0xab, 0x8f,
  0x75, 0x7e, 0xa5, 0xc3, 0xc1, 0xab, 0x94, 0x7b, 0x54, 0x30, 0x38, 0x7d,
  0xd2, 0xf8, 0xde, 0xb2, 0xa1, 0xa7, 0xa4, 0x8f, 0x86, 0x99, 0xb1, 0xa9,
  0x85, 0x71, 0x82, 0x9c, 0x96, 0x74, 0x65, 0x80, 0xa7, 0xaf, 0x9b, 0x96,
  0xb8, 0xe0, 0xe1, 0xb7, 0x8b, 0x7e, 0x85, 0x87, 0x7d, 0x79, 0x81, 0x86,
  0x81, 0x84, 0x9d, 0xba, 0xb8, 0x96, 0x7b, 0x8c, 0xb5, 0xc2, 0xa7, 0x94,
  0xb4, 0xec, 0xed, 0x98
};

const unsigned char seven_wav[] PROGMEM = {
  0x80, 0xe9, 0xff, 0xbb, 0x5e, 0x33, 0x46, 0x70, 0x87, 0x89, 0x8a, 0x92,
  0x97, 0x8e, 0x7d, 0x71, 0x6f, 0x71, 0x74, 0x7e, 0x92, 0x9e, 0x8d, 0x67,
  0x51, 0x68, 0x9e, 0xc0, 0xa8, 0x6d, 0x46, 0x53, 0x7c, 0x91, 0x85, 0x7a,
  0x90, 0xb7, 0xbc, 0x86, 0x37, 0x12, 0x3a, 0x92, 0xd9, 0xe5, 0xb8, 0x75,
  0x3f, 0x2e, 0x48, 0x81, 0xb5, 0xbf, 0x98, 0x66, 0x59, 0x79, 0x9d, 0x98,
  0x6d, 0x4f, 0x66, 0x9c, 0xb8, 0x98, 0x5c, 0x44, 0x69, 0xa6, 0xc0, 0xa2,
  0x6f, 0x50, 0x52, 0x67, 0x7c, 0x92, 0xa9, 0xb5, 0xa5, 0x7d, 0x54, 0x43,
  0x4f, 0x69, 0x89, 0xae, 0xcc, 0xc9, 0x91, 0x3d, 0x0e, 0x31, 0x90, 0xda,
  0xd3, 0x8b, 0x4c, 0x4d, 0x7f, 0xa3, 0x97, 0x70, 0x5c, 0x70, 0x90, 0x9c,
  0x8b, 0x73, 0x6a, 0x72, 0x85, 0x98, 0xa3, 0x97, 0x6f, 0x41, 0x36, 0x65,
  0xb5, 0xe4, 0xca, 0x7e, 0x40, 0x3a, 0x5c, 0x79, 0x80, 0x86, 0xa3, 0xc5,
  0xbf, 0x81, 0x35, 0x1b, 0x4a, 0x9a, 0xc9, 0xbe, 0x90, 0x68, 0x5c, 0x67,
  0x7a, 0x8d, 0x95, 0x8c, 0x74, 0x63, 0x6f, 0x8f, 0xa3, 0x8f, 0x68, 0x5c,
  0x80, 0xb2, 0xb3, 0x74, 0x2c, 0x25, 0x6f, 0xce, 0xf1, 0xc2, 0x6e, 0x36,
  0x33, 0x51, 0x76, 0x96, 0xb0, 0xbc, 0xab, 0x82, 0x5a, 0x4a, 0x56, 0x6d,
  0x83, 0x98, 0xad, 0xaf, 0x90, 0x5d, 0x3f, 0x59, 0x96, 0xbb, 0xa3, 0x67,
  0x47, 0x63, 0x99, 0xb0, 0x92, 0x67, 0x62, 0x86, 0xa6, 0x99, 0x67, 0x40,
  0x4a, 0x7e, 0xb7, 0xd1, 0xc0, 0x8a, 0x47, 0x1a, 0x26, 0x6d, 0xc5, 0xed,
  0xc8, 0x79, 0x43, 0x48, 0x6f, 0x85, 0x7a, 0x6e, 0x83, 0xac, 0xb9, 0x92,
  0x57, 0x3f, 0x61, 0x97, 0xae, 0x98, 0x72, 0x61, 0x6d, 0x81, 0x8b, 0x8e,
  0x90, 0x8e, 0x82, 0x71, 0x68, 0x6d, 0x75, 0x76, 0x78, 0x8f, 0xb9, 0xcc,
  0xa1, 0x44, 0x00, 0x16
};

const unsigned char eight_wav[] PROGMEM = {
  0x80, 0xec, 0xf4, 0xaf, 0x7a, 0x7a, 0x7e, 0x63, 0x49, 0x5a, 0x84, 0x9a,
  0x8e, 0x7b, 0x78, 0x7e, 0x83, 0x87, 0x8b, 0x8a, 0x80, 0x71, 0x6a, 0x7a,
  0x9f, 0xb7, 0x9c, 0x5c, 0x38, 0x54, 0x82, 0x81, 0x60, 0x6d, 0xbc, 0xf6,
  0xd1, 0x73, 0x3f, 0x4c, 0x5f, 0x54, 0x50, 0x78, 0xae, 0xbe, 0xa4, 0x87,
  0x79, 0x6f, 0x65, 0x6d, 0x8b, 0xa3, 0x97, 0x70, 0x54, 0x61, 0x8e, 0xab,
  0x95, 0x5f, 0x45, 0x67, 0x9a, 0xa2, 0x8b, 0x93, 0xc0, 0xca, 0x7d, 0x18,
  0x00, 0x41, 0x8c, 0xa8, 0xac, 0xb8, 0xb9, 0x95, 0x66, 0x5e, 0x75, 0x7e,
  0x6a, 0x61, 0x7b, 0x9b, 0x98, 0x78, 0x65, 0x76, 0x97, 0x9e, 0x7d, 0x59,
  0x60, 0x95, 0xc0, 0xac, 0x72, 0x59, 0x76, 0x8a, 0x65, 0x33, 0x3f, 0x88,
  0xc4, 0xca, 0xba, 0xb0, 0x96, 0x58, 0x24, 0x30, 0x6d, 0x95, 0x90, 0x89,
  0x9d, 0xac, 0x8f, 0x5b, 0x4f, 0x7b, 0xaf, 0xb2, 0x80, 0x4d, 0x50, 0x84,
  0xb0, 0xa4, 0x70, 0x53, 0x62, 0x76, 0x6f, 0x6a, 0x92, 0xcf, 0xdb, 0xa7,
  0x69, 0x4f, 0x45, 0x35, 0x3b, 0x77, 0xc0, 0xcc, 0x9a, 0x75, 0x89, 0xa6,
  0x8d, 0x53, 0x3f, 0x6a, 0x9f, 0xa6, 0x82, 0x61, 0x68, 0x89, 0x9a, 0x87,
  0x67, 0x64, 0x84, 0x9e, 0x95, 0x81, 0x8a, 0xa1, 0x99, 0x6a, 0x46, 0x47,
  0x53, 0x57, 0x73, 0xbe, 0xff, 0xe7, 0x82, 0x35, 0x3f, 0x6c, 0x74, 0x5d,
  0x65, 0x98, 0xba, 0xa0, 0x6a, 0x54, 0x71, 0x9e, 0xab, 0x8f, 0x68, 0x5c,
  0x74, 0x92, 0x9a, 0x90, 0x86, 0x78, 0x5b, 0x41, 0x51, 0x87, 0xaf, 0xab,
  0xa0, 0xb3, 0xc0, 0x8c, 0x2e, 0x09, 0x43, 0x92, 0x9f, 0x7e, 0x7d, 0xab,
  0xc7, 0xa3, 0x63, 0x48, 0x60, 0x85, 0x95, 0x8e, 0x7f, 0x75, 0x74, 0x78,
  0x7c, 0x81, 0x87, 0x84, 0x71, 0x65, 0x7b, 0xa5, 0xb6, 0x9c, 0x81, 0x85,
  0x85, 0x50, 0x0b, 0x13
};

const unsigned char nine_wav[] PROGMEM = {
  0x7c, 0x7f, 0x7d, 0x77, 0x7a, 0x7e, 0x7d, 0x84, 0x89, 0x7a, 0x68, 0x6e,
  0x7f, 0x81, 0x78, 0x70, 0x76, 0x92, 0xa4, 0x8d, 0x6b, 0x69, 0x6b, 0x65,
  0x84, 0xad, 0x85, 0x36, 0x44, 0x99, 0xb4, 0x9d, 0xa1, 0x96, 0x53, 0x34,
  0x6c, 0x9a, 0x7e, 0x55, 0x5e, 0x96, 0xc8, 0xaf, 0x56, 0x39, 0x80, 0xae,
  0x91, 0x84, 0x7f, 0x30, 0x00, 0x71, 0xf8, 0xd8, 0x73, 0x6a, 0x80, 0x69,
  0x6c, 0x95, 0x86, 0x4b, 0x45, 0x76, 0x9d, 0xa2, 0x7f, 0x5c, 0x81, 0xcb,
  0xbe, 0x67, 0x41, 0x41, 0x2a, 0x52, 0xd8, 0xff, 0x76, 0x16, 0x61, 0xb8,
  0xa5, 0x80, 0x7f, 0x6d, 0x53, 0x61, 0x7d, 0x7f, 0x76, 0x71, 0x80, 0xaf,
  0xc5, 0x87, 0x3d, 0x48, 0x79, 0x7f, 0x80, 0x99, 0x86, 0x4c, 0x54, 0x9e,
  0xb9, 0x90, 0x72, 0x70, 0x6c, 0x6b, 0x7a, 0x82, 0x79, 0x74, 0x7d, 0x88,
  0x8b, 0x81, 0x71, 0x71, 0x7f, 0x84, 0x7d, 0x7b, 0x7c, 0x7d, 0x80, 0x7c,
  0x6f, 0x6f, 0x80, 0x87, 0x7e, 0x7a, 0x7f, 0x80, 0x83, 0x87, 0x80, 0x72,
  0x6d, 0x71, 0x7e, 0x8d, 0x7d, 0x51, 0x57, 0x9f, 0xc4, 0x9d, 0x79, 0x6f,
  0x4d, 0x3f, 0x87, 0xc4, 0x8b, 0x3c, 0x53, 0x94, 0x9e, 0x8c, 0x89, 0x88,
  0x85, 0x82, 0x73, 0x66, 0x64, 0x4a, 0x35, 0x85, 0xfb, 0xe3, 0x5e, 0x35,
  0x6f, 0x7f, 0x7a, 0xaa, 0xa5, 0x36, 0x05, 0x6b, 0xca, 0xb7, 0x86, 0x7c,
  0x82, 0x8f, 0x94, 0x70, 0x45, 0x47, 0x61, 0x81, 0xba, 0xc3, 0x5e, 0x16,
  0x71, 0xe3, 0xc3, 0x78, 0x75, 0x62, 0x19, 0x2a, 0xa1, 0xd2, 0x91, 0x62,
  0x7c, 0x9d, 0x9f, 0x81, 0x56, 0x4f, 0x76, 0x8d, 0x84, 0x80, 0x75, 0x50,
  0x5d, 0xb3, 0xd8, 0x90, 0x4c, 0x59, 0x6f, 0x6c, 0x7f, 0x98, 0x83, 0x61,
  0x6d, 0x8e, 0x92, 0x83, 0x79, 0x79, 0x7d, 0x80, 0x79, 0x72, 0x75, 0x79,
  0x7a, 0x7f, 0x83, 0x7f
};

const unsigned char ten_wav[] PROGMEM = {
  0x4f, 0xf5, 0xd0, 0x8b, 0x97, 0x9b, 0x76, 0x43, 0x65, 0xb4, 0xbf, 0xba,
  0xb6, 0x75, 0x21, 0x5a, 0xe9, 0xca, 0x7a, 0x99, 0x78, 0x59, 0x8a, 0x96,
  0xbc, 0xbd, 0x84, 0x97, 0x5c, 0x27, 0xad, 0xce, 0x96, 0xcf, 0xbb, 0x49,
  0x1d, 0x63, 0xe0, 0xde, 0x84, 0x85, 0x96, 0x69, 0x62, 0xa4, 0xaf, 0x84,
  0xb6, 0xb7, 0x3d, 0x40, 0x9a, 0xcf, 0xe3, 0x93, 0x63, 0x6e, 0x39, 0x83,
  0xea, 0x9d, 0xa1, 0xca, 0x64, 0x3a, 0x6c, 0xa3, 0xbc, 0x96, 0xab, 0xc4,
  0x55, 0x1d, 0x91, 0xed, 0xbc, 0x83, 0x83, 0x54, 0x56, 0xb8, 0xbf, 0x9f,
  0xa0, 0x8f, 0x93, 0x4e, 0x29, 0xbb, 0xe1, 0xaa, 0xcd, 0x78, 0x18, 0x67,
  0xa9, 0xba, 0xae, 0x91, 0xa9, 0x76, 0x33, 0x93, 0xdd, 0x99, 0x76, 0xaa,
  0x9a, 0x3e, 0x57, 0xb4, 0xcf, 0xd5, 0x9c, 0x4e, 0x41, 0x4e, 0xb9, 0xf7,
  0x85, 0x8c, 0xc1, 0x58, 0x4d, 0x89, 0x8b, 0xba, 0xc4, 0xa5, 0x7d, 0x2a,
  0x65, 0xe9, 0xbe, 0x7e, 0x9e, 0x8a, 0x3c, 0x54, 0xcb, 0xdd, 0x9f, 0x8d,
  0x80, 0x72, 0x59, 0x5d, 0xbd, 0xcc, 0xb0, 0xcf, 0x57, 0x00, 0x8f, 0xd0,
  0xb4, 0xaa, 0x7b, 0x80, 0x79, 0x60, 0xb3, 0xb8, 0x7a, 0xb3, 0xb2, 0x3c,
  0x2e, 0xa2, 0xe8, 0xbb, 0x9c, 0x95, 0x5d, 0x3a, 0x61, 0xc7, 0xed, 0x94,
  0x89, 0x94, 0x43, 0x75, 0xb6, 0x7a, 0xa4, 0xd2, 0x95, 0x5d, 0x30, 0x86,
  0xff, 0xb5, 0x7f, 0x93, 0x46, 0x42, 0xb0, 0xd4, 0xa4, 0x90, 0xb0, 0x8e,
  0x38, 0x42, 0xa2, 0xe0, 0xb9, 0x93, 0xa7, 0x56, 0x2a, 0xa8, 0xc2, 0xa6,
  0xc0, 0x74, 0x48, 0x77, 0x97, 0xcf, 0xa3, 0x65, 0xbf, 0x9e, 0x1c, 0x58,
  0xbf, 0xd0, 0xca, 0xab, 0x6d, 0x2b, 0x48, 0xb9, 0xdc, 0xa1, 0x82, 0xa9,
  0x90, 0x35, 0x72, 0xc9, 0x9a, 0xab, 0xaf, 0x5a, 0x5f, 0x77, 0x9d, 0xdc,
  0xaa, 0x95, 0x88, 0x11
};

const unsigned char eleven_wav[] PROGMEM = {
  0x80, 0xfe, 0xff, 0x88, 0x14, 0x13, 0x77, 0xd0, 0xca, 0x7d, 0x47, 0x5d,
  0x96, 0xa8, 0x81, 0x57, 0x5e, 0x8e, 0xae, 0x9d, 0x72, 0x5d, 0x6b, 0x80,
  0x83, 0x7f, 0x8e, 0xa6, 0xa0, 0x6a, 0x2f, 0x39, 0x93, 0xec, 0xe4, 0x75,
  0x08, 0x0c, 0x82, 0xf2, 0xec, 0x7c, 0x1c, 0x2c, 0x91, 0xd6, 0xb1, 0x55,
  0x2f, 0x6c, 0xc4, 0xd1, 0x83, 0x2c, 0x2b, 0x7e, 0xce, 0xd0, 0x8b, 0x49,
  0x42, 0x69, 0x8e, 0x9b, 0x9b, 0x9b, 0x8e, 0x69, 0x42, 0x49, 0x8b, 0xd0,
  0xce, 0x7e, 0x2b, 0x2c, 0x83, 0xd1, 0xc4, 0x6c, 0x2f, 0x55, 0xb1, 0xd6,
  0x91, 0x2c, 0x1c, 0x7c, 0xec, 0xf2, 0x82, 0x0c, 0x08, 0x75, 0xe4, 0xec,
  0x93, 0x39, 0x2f, 0x6a, 0xa0, 0xa6, 0x8e, 0x7f, 0x83, 0x80, 0x6b, 0x5d,
  0x72, 0x9d, 0xae, 0x8e, 0x5e, 0x57, 0x81, 0xa8, 0x96, 0x5d, 0x47, 0x7d,
  0xca, 0xd0, 0x77, 0x13, 0x14, 0x88, 0xff, 0xfe, 0x80, 0x01, 0x00, 0x77,
  0xeb, 0xec, 0x88, 0x2f, 0x35, 0x82, 0xb8, 0xa2, 0x69, 0x57, 0x7e, 0xa8,
  0xa1, 0x71, 0x51, 0x62, 0x8d, 0xa2, 0x94, 0x7f, 0x7c, 0x80, 0x71, 0x59,
  0x5f, 0x95, 0xd0, 0xc6, 0x6c, 0x13, 0x1b, 0x8a, 0xf7, 0xf3, 0x7d, 0x0d,
  0x13, 0x83, 0xe3, 0xd3, 0x6e, 0x29, 0x4e, 0xaa, 0xd0, 0x93, 0x3b, 0x2e,
  0x7c, 0xd3, 0xd4, 0x81, 0x31, 0x2f, 0x74, 0xb6, 0xbd, 0x96, 0x71, 0x64,
  0x64, 0x64, 0x71, 0x96, 0xbd, 0xb6, 0x74, 0x2f, 0x31, 0x81, 0xd4, 0xd3,
  0x7c, 0x2e, 0x3b, 0x93, 0xd0, 0xaa, 0x4e, 0x29, 0x6e, 0xd3, 0xe3, 0x83,
  0x13, 0x0d, 0x7d, 0xf3, 0xf7, 0x8a, 0x1b, 0x13, 0x6c, 0xc6, 0xd0, 0x95,
  0x5f, 0x59, 0x71, 0x80, 0x7c, 0x7f, 0x94, 0xa2, 0x8d, 0x62, 0x51, 0x71,
  0xa1, 0xa8, 0x7e, 0x57, 0x69, 0xa2, 0xb8, 0x82, 0x35, 0x2f, 0x88, 0xec,
  0xeb, 0x77, 0x00, 0x01
};

const unsigned char twelve_wav[] PROGMEM = {
  0x4b, 0xba, 0xe1, 0xa9, 0x82, 0xa1, 0xbc, 0xa0, 0x83, 0x95, 0xa6, 0x87,
  0x5d, 0x5a, 0x6e, 0x78, 0x7b, 0x7d, 0x73, 0x6b, 0x7f, 0x93, 0x6f, 0x2d,
  0x29, 0x6e, 0x99, 0x7f, 0x6f, 0x9d, 0xbe, 0x9b, 0x7e, 0xb2, 0xf6, 0xdf,
  0x87, 0x57, 0x5f, 0x60, 0x46, 0x37, 0x3e, 0x47, 0x53, 0x6c, 0x7e, 0x7a,
  0x80, 0xa2, 0xb6, 0xa0, 0x94, 0xb6, 0xc3, 0x80, 0x35, 0x4d, 0xa4, 0xbb,
  0x85, 0x6a, 0x86, 0x8e, 0x65, 0x4f, 0x71, 0x8a, 0x6c, 0x42, 0x3e, 0x53,
  0x65, 0x78, 0x8a, 0x8f, 0x9b, 0xc9, 0xf1, 0xd4, 0x8e, 0x79, 0x9a, 0x98,
  0x61, 0x48, 0x68, 0x69, 0x26, 0x00, 0x41, 0x9e, 0xab, 0x81, 0x7a, 0x97,
  0xa0, 0x8e, 0x89, 0x91, 0x8e, 0x88, 0x8e, 0x8f, 0x80, 0x80, 0x96, 0x96,
  0x75, 0x71, 0xa1, 0xb1, 0x64, 0x0d, 0x18, 0x5e, 0x6f, 0x50, 0x5a, 0x91,
  0xa1, 0x81, 0x82, 0xc0, 0xed, 0xd8, 0xab, 0x95, 0x89, 0x79, 0x69, 0x57,
  0x39, 0x2f, 0x57, 0x85, 0x7a, 0x52, 0x5c, 0x8d, 0x93, 0x72, 0x7f, 0xbc,
  0xc0, 0x6d, 0x35, 0x66, 0xb0, 0xb5, 0x94, 0x95, 0xab, 0xa2, 0x84, 0x79,
  0x7c, 0x6e, 0x5a, 0x51, 0x46, 0x37, 0x42, 0x61, 0x66, 0x52, 0x6f, 0xcb,
  0xff, 0xce, 0x8a, 0x93, 0xbb, 0xa8, 0x74, 0x74, 0x94, 0x7b, 0x32, 0x1d,
  0x52, 0x83, 0x81, 0x71, 0x75, 0x7e, 0x82, 0x86, 0x80, 0x65, 0x5a, 0x7e,
  0xa7, 0x9c, 0x80, 0x92, 0xb6, 0xa4, 0x79, 0x8f, 0xd4, 0xd0, 0x6b, 0x1e,
  0x30, 0x57, 0x4a, 0x31, 0x48, 0x6f, 0x73, 0x6b, 0x83, 0xa9, 0xbc, 0xbf,
  0xbf, 0xb2, 0x9c, 0x9a, 0x9f, 0x77, 0x37, 0x34, 0x7c, 0xa6, 0x7b, 0x4b,
  0x62, 0x86, 0x6e, 0x4d, 0x71, 0xab, 0x99, 0x50, 0x38, 0x68, 0x95, 0x9a,
  0x99, 0xa8, 0xb5, 0xb9, 0xbe, 0xb1, 0x88, 0x68, 0x6f, 0x75, 0x51, 0x30,
  0x43, 0x5d, 0x3d, 0x16
};

const unsigned char thirteen_wav[] PROGMEM = {
  0x6a, 0xe6, 0xf7, 0xab, 0x6e, 0x4d, 0x28, 0x33, 0x8c, 0xcf, 0xa9, 0x65,
  0x66, 0x8c, 0x95, 0x96, 0xa4, 0x8e, 0x4c, 0x27, 0x46, 0x82, 0xb8, 0xd8,
  0xbd, 0x6d, 0x3e, 0x64, 0x98, 0x8f, 0x6e, 0x60, 0x52, 0x53, 0x9d, 0xff,
  0xee, 0x67, 0x0f, 0x36, 0x7c, 0x95, 0x9f, 0x9c, 0x6b, 0x3f, 0x6e, 0xcd,
  0xe4, 0xa2, 0x55, 0x2b, 0x27, 0x55, 0xa2, 0xc9, 0xb4, 0x94, 0x81, 0x64,
  0x58, 0x84, 0xae, 0x84, 0x3b, 0x3e, 0x7d, 0xa2, 0xb3, 0xcf, 0xba, 0x54,
  0x0f, 0x4b, 0xab, 0xb0, 0x73, 0x55, 0x62, 0x82, 0xb8, 0xe5, 0xbd, 0x4f,
  0x09, 0x24, 0x70, 0xb4, 0xd2, 0xae, 0x60, 0x47, 0x84, 0xb8, 0xa1, 0x79,
  0x6b, 0x4e, 0x29, 0x53, 0xc0, 0xee, 0xb6, 0x7b, 0x6f, 0x5b, 0x40, 0x64,
  0xa8, 0xa4, 0x60, 0x49, 0x7f, 0xb9, 0xcc, 0xb8, 0x75, 0x26, 0x1c, 0x68,
  0xb1, 0xb6, 0x97, 0x74, 0x57, 0x6a, 0xbd, 0xe9, 0x95, 0x19, 0x08, 0x54,
  0x91, 0xb2, 0xd7, 0xcc, 0x73, 0x30, 0x56, 0x9a, 0x99, 0x73, 0x6a, 0x69,
  0x5b, 0x71, 0xb3, 0xd8, 0xb9, 0x7d, 0x47, 0x27, 0x42, 0x92, 0xc1, 0x9b,
  0x67, 0x70, 0x91, 0x9f, 0xad, 0xac, 0x62, 0x00, 0x11, 0x98, 0xf0, 0xc9,
  0x83, 0x6a, 0x60, 0x63, 0x94, 0xc0, 0x91, 0x32, 0x1b, 0x5d, 0xaa, 0xd4,
  0xd8, 0xaa, 0x5d, 0x36, 0x4b, 0x6b, 0x7e, 0x9b, 0xa7, 0x7b, 0x51, 0x7b,
  0xc4, 0xc1, 0x82, 0x5d, 0x4c, 0x30, 0x45, 0xab, 0xf0, 0xb4, 0x54, 0x4f,
  0x8c, 0xaa, 0x9d, 0x7d, 0x47, 0x1a, 0x42, 0xb0, 0xf6, 0xdb, 0x8f, 0x4b,
  0x2d, 0x51, 0x9f, 0xb8, 0x7b, 0x47, 0x5e, 0x86, 0x94, 0xb1, 0xd6, 0xac,
  0x3f, 0x11, 0x49, 0x84, 0x90, 0xa4, 0xbf, 0x9b, 0x57, 0x5b, 0x9f, 0xb6,
  0x80, 0x46, 0x33, 0x47, 0x8a, 0xd9, 0xe3, 0x97, 0x4e, 0x49, 0x68, 0x8b,
  0xa8, 0x95, 0x42, 0x16
};

const unsigned char fourteen_wav[] PROGMEM = {
  0x8a, 0x80, 0x7d, 0x7a, 0x80, 0x92, 0x97, 0x80, 0x75, 0x92, 0xa7, 0x8d,
  0x6f, 0x88, 0xbc, 0xb2, 0x72, 0x56, 0x73, 0x79, 0x61, 0x76, 0xcd, 0xf7,
  0xa5, 0x46, 0x52, 0x9f, 0xa7, 0x70, 0x6b, 0x9d, 0x9c, 0x5f, 0x55, 0xa7,
  0xd9, 0xa1, 0x65, 0x8b, 0xcc, 0xa9, 0x4b, 0x29, 0x5c, 0x85, 0x85, 0xa5,
  0xe6, 0xef, 0x9f, 0x4e, 0x4e, 0x74, 0x7a, 0x68, 0x77, 0x9a, 0xa8, 0x9b,
  0x97, 0x9d, 0x99, 0x8f, 0x8a, 0x82, 0x70, 0x65, 0x76, 0x88, 0x89, 0x90,
  0xa8, 0xaf, 0x8f, 0x72, 0x8f, 0xb4, 0x96, 0x55, 0x53, 0x8a, 0x9d, 0x74,
  0x68, 0xa2, 0xca, 0xa8, 0x86, 0xab, 0xc2, 0x6d, 0x00, 0x14, 0x91, 0xde,
  0xc4, 0xaa, 0xbf, 0xb3, 0x5b, 0x29, 0x61, 0xae, 0x9f, 0x6a, 0x80, 0xc7,
  0xc6, 0x76, 0x46, 0x69, 0x93, 0x90, 0x90, 0xb4, 0xc4, 0x8f, 0x53, 0x4f,
  0x7b, 0x92, 0x8c, 0x8d, 0x9f, 0xa3, 0x9b, 0x92, 0x8a, 0x7c, 0x79, 0x80,
  0x7f, 0x70, 0x72, 0x98, 0xb8, 0xab, 0x8e, 0x8b, 0x8b, 0x6a, 0x4f, 0x7d,
  0xc9, 0xc7, 0x7b, 0x52, 0x7e, 0x9a, 0x72, 0x5a, 0x94, 0xd5, 0xbd, 0x88,
  0x91, 0xaf, 0x75, 0x09, 0x07, 0x87, 0xf2, 0xe4, 0xb3, 0xb2, 0xae, 0x68,
  0x26, 0x49, 0x9b, 0xa2, 0x6c, 0x6c, 0xb3, 0xd4, 0xa3, 0x72, 0x7e, 0x9a,
  0x88, 0x6c, 0x79, 0x8e, 0x82, 0x6c, 0x75, 0x9c, 0xb1, 0xa6, 0x98, 0x92,
  0x8a, 0x82, 0x7f, 0x7a, 0x6b, 0x6a, 0x84, 0x96, 0x8a, 0x88, 0xb1, 0xd7,
  0xbb, 0x7b, 0x5d, 0x5f, 0x4a, 0x37, 0x6f, 0xdc, 0xff, 0xb1, 0x6b, 0x7c,
  0xa2, 0x7b, 0x44, 0x63, 0xa6, 0xa6, 0x72, 0x7e, 0xbe, 0xbb, 0x62, 0x3a,
  0x89, 0xde, 0xc2, 0x71, 0x60, 0x7e, 0x74, 0x56, 0x7a, 0xca, 0xd3, 0x8b,
  0x5a, 0x7c, 0xa6, 0x94, 0x6f, 0x7a, 0x97, 0x93, 0x78, 0x78, 0x8f, 0x93,
  0x8a, 0x8f, 0x9d, 0x99
};

const unsigned char fifteen_wav[] PROGMEM = {
  0x81, 0x77, 0x76, 0x81, 0x91, 0x9b, 0x98, 0x8a, 0x7a, 0x6f, 0x6c, 0x70,
  0x7d, 0x96, 0xb9, 0xd8, 0xe3, 0xcb, 0x94, 0x51, 0x1b, 0x09, 0x22, 0x5c,
  0xa2, 0xdb, 0xf5, 0xeb, 0xc7, 0x98, 0x70, 0x57, 0x4b, 0x4b, 0x58, 0x76,
  0xa2, 0xcc, 0xdd, 0xc6, 0x8e, 0x51, 0x2f, 0x38, 0x5f, 0x8a, 0xa5, 0xad,
  0xae, 0xb1, 0xb3, 0xa8, 0x8e, 0x6d, 0x5b, 0x64, 0x80, 0x9e, 0xac, 0xa5,
  0x94, 0x84, 0x7d, 0x7d, 0x7d, 0x7e, 0x7e, 0x7c, 0x76, 0x6d, 0x66, 0x6d,
  0x85, 0xa8, 0xc6, 0xcc, 0xb8, 0x95, 0x76, 0x69, 0x70, 0x83, 0x98, 0xa6,
  0xa9, 0xa0, 0x8b, 0x70, 0x53, 0x3e, 0x39, 0x49, 0x6f, 0xa4, 0xd9, 0xf9,
  0xf5, 0xcb, 0x8c, 0x56, 0x3f, 0x4a, 0x67, 0x80, 0x8c, 0x90, 0x97, 0xa5,
  0xad, 0xa0, 0x7d, 0x58, 0x4a, 0x62, 0x91, 0xbd, 0xce, 0xbf, 0x9f, 0x84,
  0x75, 0x70, 0x70, 0x72, 0x77, 0x81, 0x8a, 0x8a, 0x83, 0x7b, 0x7c, 0x89,
  0x9a, 0xa5, 0xa2, 0x94, 0x83, 0x77, 0x72, 0x74, 0x80, 0x97, 0xb7, 0xd5,
  0xdd, 0xc4, 0x8c, 0x48, 0x11, 0x00, 0x19, 0x54, 0x9c, 0xd6, 0xf2, 0xea,
  0xc8, 0x9b, 0x75, 0x5d, 0x53, 0x54, 0x62, 0x80, 0xab, 0xd5, 0xe4, 0xcb,
  0x91, 0x52, 0x2f, 0x36, 0x5b, 0x84, 0x9d, 0xa4, 0xa4, 0xa7, 0xa9, 0xa0,
  0x86, 0x68, 0x57, 0x62, 0x80, 0xa0, 0xb0, 0xab, 0x9b, 0x8d, 0x87, 0x86,
  0x87, 0x87, 0x85, 0x82, 0x7b, 0x6f, 0x67, 0x6b, 0x81, 0xa3, 0xbe, 0xc4,
  0xaf, 0x8c, 0x6d, 0x60, 0x68, 0x7d, 0x93, 0xa3, 0xa8, 0xa1, 0x8f, 0x75,
  0x5a, 0x46, 0x42, 0x53, 0x79, 0xad, 0xe1, 0xff, 0xfa, 0xce, 0x8e, 0x55,
  0x3c, 0x45, 0x60, 0x78, 0x83, 0x86, 0x8e, 0x9c, 0xa4, 0x98, 0x77, 0x54,
  0x49, 0x62, 0x94, 0xc2, 0xd4, 0xc6, 0xa8, 0x8d, 0x7e, 0x7a, 0x79, 0x79,
  0x7d, 0x85, 0x8c, 0x8b
};


const unsigned char sixteen_wav[] PROGMEM = {
  0x84, 0x82, 0x86, 0x8b, 0x8c, 0x8a, 0x85, 0x7d, 0x76, 0x79, 0x88, 0x94,
  0x90, 0x80, 0x74, 0x6d, 0x6a, 0x73, 0x92, 0xba, 0xc4, 0xa2, 0x6e, 0x4d,
  0x48, 0x59, 0x7b, 0xa8, 0xc3, 0xad, 0x74, 0x51, 0x62, 0x8d, 0xa9, 0xaf,
  0xab, 0x92, 0x5b, 0x26, 0x29, 0x67, 0xaf, 0xd5, 0xd9, 0xc9, 0x99, 0x4d,
  0x1a, 0x34, 0x86, 0xc4, 0xbe, 0x92, 0x68, 0x4d, 0x47, 0x6d, 0xbf, 0xff,
  0xeb, 0x8d, 0x36, 0x19, 0x28, 0x49, 0x82, 0xcc, 0xf3, 0xd0, 0x82, 0x4e,
  0x50, 0x68, 0x81, 0xa1, 0xbb, 0xa8, 0x5e, 0x1d, 0x28, 0x78, 0xc8, 0xe9,
  0xe0, 0xb8, 0x73, 0x2b, 0x15, 0x49, 0x96, 0xbc, 0xb1, 0x98, 0x86, 0x73,
  0x63, 0x6f, 0x99, 0xba, 0xaf, 0x84, 0x5f, 0x4f, 0x50, 0x62, 0x8c, 0xbb,
  0xc9, 0xa9, 0x79, 0x60, 0x63, 0x71, 0x81, 0x90, 0x97, 0x8d, 0x7a, 0x71,
  0x79, 0x87, 0x8e, 0x8d, 0x8a, 0x86, 0x82, 0x81, 0x84, 0x85, 0x82, 0x7e,
  0x7b, 0x7b, 0x7f, 0x8a, 0x95, 0x92, 0x7f, 0x6e, 0x72, 0x86, 0x99, 0xa1,
  0x9f, 0x8e, 0x6c, 0x4a, 0x49, 0x6f, 0x9e, 0xb5, 0xb3, 0xa8, 0x92, 0x6c,
  0x4d, 0x56, 0x85, 0xab, 0xa8, 0x89, 0x6b, 0x57, 0x4e, 0x67, 0xab, 0xef,
  0xef, 0xa3, 0x4a, 0x21, 0x28, 0x4a, 0x81, 0xc2, 0xe3, 0xc0, 0x76, 0x4d,
  0x5d, 0x82, 0x98, 0xa6, 0xb2, 0x9f, 0x5c, 0x18, 0x1b, 0x67, 0xbe, 0xed,
  0xf1, 0xd1, 0x88, 0x2c, 0x00, 0x31, 0x93, 0xce, 0xc0, 0x93, 0x71, 0x5c,
  0x55, 0x73, 0xb5, 0xe3, 0xcc, 0x82, 0x44, 0x30, 0x36, 0x4d, 0x84, 0xcd,
  0xf2, 0xcd, 0x80, 0x4d, 0x4a, 0x60, 0x7d, 0x9f, 0xb3, 0x9e, 0x65, 0x3f,
  0x52, 0x8a, 0xb5, 0xbf, 0xb3, 0x9a, 0x74, 0x4f, 0x48, 0x65, 0x8d, 0xa0,
  0x9e, 0x96, 0x8c, 0x7d, 0x71, 0x76, 0x88, 0x95, 0x91, 0x84, 0x7a, 0x78,
  0x7b, 0x80, 0x86, 0x87
};

// Global shit
int digitalIn = 0;
int mode = 0;
int pot1Raw = 0;
int pot2Raw = 0;
int pot3Raw = 0;

// Arrays for oscillators
signed char Mask, AMMask, PDMask, DETMask, DETMask1, Temp, AMTemp, PDTemp, DETTemp, DETTemp1, Sum = 0, AMSum = 0, PDSum = 0, DETSum = 0, DETSum1 = 0, LFO;
unsigned int Acc[] = {0, 0, 0, 0, 0, 0, 0};
unsigned int Freqs[] = {0, 0, 0, 0};

// Wavetable mode
unsigned int wav_len = 256;
int p = 0;
char sample = 0;
int select = 0;
int gnarl = 0;

// Phase distortion mode
int PDwave = 0;  // tri
int PDSwave = 0;  // saw
int PDscale = 0; // tri
int PDSscale = 0; // saw
int PDoctave = 0;
int PDSoctave = 0;
int fuckery = 0;

int algo4 = 0; 
int algo4diff = 0;

// Glitch mode
int glitch = 0;
int sqr[] = {0, 0, 0};

// Detuned triangle mode
int DETpitch = 0;
int DETmod = 0;

void setup() {

  // Enable 64 MHz PLL and use as source for Timer1
  PLLCSR = 1 << PCKE | 1 << PLLE;

  // Set up Timer/Counter1 for PWM output
  TIMSK = 0;                     // Timer interrupts OFF
  TCCR1 = 1 << PWM1A | 2 << COM1A0 | 1 << CS10;
  pinMode(1, OUTPUT);            // Enable PWM output pin

  // Set up Timer/Counter0 for 20kHz interrupt to output samples.
  TCCR0A = 3 << WGM00;            // Fast PWM
  TCCR0B = 1 << WGM02 | 2 << CS00; // 1/8 prescale
  TIMSK = 1 << OCIE0A;            // Enable compare match, disable overflow

  pinMode(0, INPUT); // Assign pin 0 as digital input
}

void loop() {
  // Read pots
  pot1Raw = analogRead(A1); // Read Pin 1 as analog input
  pot2Raw = analogRead(A2); // Read pin 2 as analog input
  pot3Raw = analogRead(A3); // Read pin 2 as analog input

  // Mode select
  mode = map(pot3Raw, 0, 1023, 1, 8); 

  // Set master clock speed
  if (mode == 2 || 3 || 4) {                            // When in AM, PD or detuned tri mode
    OCR0A = map(pot2Raw, 0, 1023, 255, 125); // map pot2 to overall clock speed (originally 105 before detune tri)
  }
  else {
    OCR0A = map(pot2Raw, 0, 1023, 255, 50); // map pot2 to overall clock speed
  }
  // Read switches
  digitalIn = digitalRead(0);

  if (digitalIn == LOW) {                     // When in right position
    Freqs[1] = map(pot1Raw, 0, 1023, 500, 3000); // Modulator
    PDoctave = 5; // lower number == higher octave
    PDSoctave = 1; // higher number == lower octave
    gnarl = map(pot1Raw, 0, 1023, 0, 127); // map pot1 to static offset that adds distortion during interrupt
    DETmod = map(pot1Raw, 0, 1023, -500, 500); // map pot1 to detune range
    glitch = map(pot1Raw, 0, 1023, 64, 127); // glitch oscillator frequency
  }

  else {                                     // When in left position
    Freqs[1] = map(pot1Raw, 0, 1023, 1, 500); // Modulator
    DETmod = map(pot1Raw, 0, 1023, -50, 50); // map pot1 to detune range
    PDoctave = 7; // higher number == lower octave
    PDSoctave = 4; // higher number == lower octave
    gnarl = 0;
    glitch = map(pot1Raw, 0, 1023, 1, 16); // glitch oscillator frequency
  }

  // FM/AM Mode //
  Freqs[0] = map(pot2Raw, 0, 1023, 1, 127);// Carrier

  // Wavetable mode //
  select = map(pot1Raw, 0, 1023, 1, 16); // map pot1 to a 1 X 16 switch for selecting waveforms

  // Phase distortion triangle mode
  fuckery = map(pot1Raw, 1, 1023, 1, 32);

  // Detuned Triangle mode //
  DETpitch = map(pot2Raw, 0, 1023, 300, 3000);
  Freqs[2] = DETpitch;
  Freqs[3] = DETpitch + DETmod;
}

ISR(TIMER0_COMPA_vect) {

  // LFO
  Acc[1] = Acc[1] + Freqs[1];
  Temp = Acc[1] >> 8;
  Mask = Temp >> 15;
  LFO = Temp ^ Mask;

  LFO = min(LFO, 127); // Second number is LFO depth)

  // FM Mode
  Acc[0] = Acc[0] + Freqs[0] * LFO + 400;
  Temp = Acc[0] >> 8;
  Mask = Temp >> 15;
  Sum = Temp ^ Mask;

  // Amplitude Modulation mode
  Acc[2] = Acc[2] + Freqs[0] + 2500;
  AMTemp = Acc[2] >> 8;
  AMMask = AMTemp >> 15;
  AMSum = AMTemp ^ AMMask;

  // Phase Distortion triangle
  Acc[3] = Acc[3] + 400;
  PDTemp = Acc[3] >> PDoctave;
  PDMask = PDTemp >> 7;
  PDwave = PDTemp ^ PDMask; // tri
  PDscale = (PDwave * fuckery);
  PDscale = max(PDscale, 0);
  PDscale = min(PDscale, 255);

  // Phase Distortion saw
  Acc[4] = Acc[4] + 400;
  PDSwave = Acc[4] >> PDSoctave;
  PDSscale = (PDSwave * fuckery);
  PDSscale = max(PDSscale, 0);
  PDSscale = min(PDSscale, 255);

  // Glitch mode
  sqr[0] = sqr[0] + glitch;
  sqr[1] = sqr[1] + glitch;
  sqr[2] = sqr[2] + glitch;


  // Detuned triangle + saw mode
  Acc[5] = Acc[5] + Freqs[2];
  DETTemp = Acc[5] >> 8;
  DETMask = DETTemp >> 15;
  DETSum = DETTemp ^ DETMask;

  Acc[6] = Acc[6] + Freqs[3];
  DETTemp1 = Acc[6] >> 8;
  DETMask1 = DETTemp1 >> 15;
  DETSum1 = DETTemp1 ^ DETMask1;

  //Wavetable mode
  if (p >= wav_len)
  {
    p = 0;
  }

  switch (select)
  {
    case 1:
      sample = pgm_read_byte(&one_wav[p++]);
      break;

    case 2:
      sample = pgm_read_byte(&two_wav[p++]);
      break;

    case 3:
      sample = pgm_read_byte(&three_wav[p++]);
      break;

    case 4:
      sample = pgm_read_byte(&four_wav[p++]);
      break;

    case 5:
      sample = pgm_read_byte(&five_wav[p++]);
      break;

    case 6:
      sample = pgm_read_byte(&six_wav[p++]);
      break;

    case 7:
      sample = pgm_read_byte(&seven_wav[p++]);
      break;

    case 8:
      sample = pgm_read_byte(&eight_wav[p++]);
      break;

    case 9:
      sample = pgm_read_byte(&nine_wav[p++]);
      break;

    case 10:
      sample = pgm_read_byte(&ten_wav[p++]);
      break;

    case 11:
      sample = pgm_read_byte(&eleven_wav[p++]);
      break;

    case 12:
      sample = pgm_read_byte(&twelve_wav[p++]);
      break;

    case 13:
      sample = pgm_read_byte(&thirteen_wav[p++]);
      break;

    case 14:
      sample = pgm_read_byte(&fourteen_wav[p++]);
      break;

    case 15:
      sample = pgm_read_byte(&fifteen_wav[p++]);
      break;

    case 16:
      sample = pgm_read_byte(&sixteen_wav[p++]);
      break;

  }

  // Output
  switch (mode) {
    case 1:
      OCR1A = Sum; // FM mode
      break;

    case 2:
      OCR1A = (AMSum * LFO) >> 6; // Amplitude Modulation
      break;

    case 3:
      OCR1A = (DETSum + DETSum1); // Detuned triangle mode
      break;

    case 4: 
      algo4 = ((DETTemp + DETTemp1) >> 15); // Mix the saws       
      algo4diff = (0 - algo4) * 100; // last number == volume 0-255
      OCR1A = algo4 + algo4diff; // Detuned saw mode 
      break; 
      
    case 5:
      OCR1A = PDscale >> 1; // Phase distortion triangle
      break;

    case 6:
      OCR1A = PDSscale >> 1; // Phase distortion saw
      break;

    case 7:
      OCR1A = sample + gnarl; // Wavetable mode
      break;

    case 8:
      OCR1A = (sqr[0] * sqr [1]) ^ sqr[2] >> 8 & 0x80; // Glitch mode
      break;
  }

}
